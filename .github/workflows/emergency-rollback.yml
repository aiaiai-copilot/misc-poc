name: Emergency Migration Rollback

on:
  workflow_dispatch:
    inputs:
      backup_name:
        description: 'Backup name to restore from (e.g., pre-migration-20241201-143000)'
        required: true
        type: string
      confirmation:
        description: 'Type "EMERGENCY_ROLLBACK" to confirm'
        required: true
        type: string
      reason:
        description: 'Reason for emergency rollback'
        required: true
        type: string
      skip_health_checks:
        description: 'Skip health checks (emergency only)'
        required: false
        default: false
        type: boolean
      force_rollback:
        description: 'Force rollback even if backup validation fails'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  actions: read
  checks: write
  issues: write

env:
  NODE_VERSION: '22.18.0'
  YARN_VERSION: '3.6.4'

jobs:
  emergency_validation:
    name: Emergency Rollback Validation
    runs-on: ubuntu-latest
    environment: production
    outputs:
      rollback_approved: ${{ steps.validate_request.outputs.approved }}
      backup_validated: ${{ steps.validate_backup.outputs.validated }}

    steps:
      - name: Validate emergency rollback request
        id: validate_request
        run: |
          echo "🚨 Emergency Rollback Request Validation"
          echo "Requested by: ${{ github.actor }}"
          echo "Backup: ${{ inputs.backup_name }}"
          echo "Reason: ${{ inputs.reason }}"

          if [ "${{ inputs.confirmation }}" != "EMERGENCY_ROLLBACK" ]; then
            echo "❌ Invalid confirmation. Type 'EMERGENCY_ROLLBACK' to proceed."
            exit 1
          fi

          if [ -z "${{ inputs.backup_name }}" ]; then
            echo "❌ Backup name is required"
            exit 1
          fi

          if [ -z "${{ inputs.reason }}" ]; then
            echo "❌ Rollback reason is required"
            exit 1
          fi

          echo "✅ Emergency rollback request validated"
          echo "approved=true" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Validate backup exists
        id: validate_backup
        run: |
          echo "🔍 Validating backup availability..."

          # In a real scenario, this would check backup storage
          # For now, we'll simulate the validation

          BACKUP_NAME="${{ inputs.backup_name }}"

          # Check backup name format
          if [[ ! "$BACKUP_NAME" =~ ^pre-migration-[0-9]{8}-[0-9]{6}$ ]]; then
            if [ "${{ inputs.force_rollback }}" != "true" ]; then
              echo "❌ Invalid backup name format. Expected: pre-migration-YYYYMMDD-HHMMSS"
              exit 1
            else
              echo "⚠️ Invalid backup name format, but force rollback enabled"
            fi
          fi

          echo "✅ Backup validation completed"
          echo "validated=true" >> $GITHUB_OUTPUT

      - name: Log emergency rollback initiation
        run: |
          echo "📝 Emergency Rollback Log Entry" >> emergency-rollback.log
          echo "Timestamp: $(date)" >> emergency-rollback.log
          echo "Initiated by: ${{ github.actor }}" >> emergency-rollback.log
          echo "Backup: ${{ inputs.backup_name }}" >> emergency-rollback.log
          echo "Reason: ${{ inputs.reason }}" >> emergency-rollback.log
          echo "Force rollback: ${{ inputs.force_rollback }}" >> emergency-rollback.log
          echo "Skip health checks: ${{ inputs.skip_health_checks }}" >> emergency-rollback.log
          echo "---" >> emergency-rollback.log

      - name: Upload rollback log
        uses: actions/upload-artifact@v4
        with:
          name: emergency-rollback-log
          path: emergency-rollback.log

  pre_rollback_backup:
    name: Create Pre-Rollback Backup
    runs-on: ubuntu-latest
    needs: emergency_validation
    if: needs.emergency_validation.outputs.rollback_approved == 'true'
    environment: production
    outputs:
      current_backup_name: ${{ steps.create_backup.outputs.backup_name }}
      current_backup_success: ${{ steps.create_backup.outputs.success }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Create current state backup
        id: create_backup
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_PROD_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_PROD_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_PROD_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PROD_PASSWORD }}
        run: |
          CURRENT_BACKUP_NAME="pre-rollback-$(date +%Y%m%d-%H%M%S)"

          echo "🔄 Creating backup of current state before rollback..."
          echo "Backup name: $CURRENT_BACKUP_NAME"

          chmod +x ./scripts/db-backup.sh
          ./scripts/db-backup.sh --production --backup-name="$CURRENT_BACKUP_NAME"

          echo "backup_name=$CURRENT_BACKUP_NAME" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Pre-rollback backup created: $CURRENT_BACKUP_NAME"

      - name: Upload current state backup
        uses: actions/upload-artifact@v4
        with:
          name: pre-rollback-backup-${{ steps.create_backup.outputs.backup_name }}
          path: backup-${{ steps.create_backup.outputs.backup_name }}.sql
          retention-days: 30

  execute_emergency_rollback:
    name: Execute Emergency Rollback
    runs-on: ubuntu-latest
    needs: [emergency_validation, pre_rollback_backup]
    environment: production
    outputs:
      rollback_success: ${{ steps.rollback_execution.outputs.success }}
      rollback_duration: ${{ steps.rollback_execution.outputs.duration }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        run: yarn install --immutable

      - name: Download original backup
        run: |
          echo "📥 Downloading backup: ${{ inputs.backup_name }}"
          # In a real scenario, this would download from backup storage
          echo "✅ Backup download completed (simulated)"

      - name: Execute rollback
        id: rollback_execution
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_PROD_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_PROD_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_PROD_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PROD_PASSWORD }}
        run: |
          START_TIME=$(date +%s)

          echo "🚨 EXECUTING EMERGENCY ROLLBACK"
          echo "Target backup: ${{ inputs.backup_name }}"
          echo "Reason: ${{ inputs.reason }}"

          chmod +x ./scripts/db-backup.sh
          ./scripts/db-backup.sh --restore --backup-name="${{ inputs.backup_name }}"

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))

          echo "success=true" >> $GITHUB_OUTPUT
          echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
          echo "✅ Emergency rollback completed in ${DURATION}s"

      - name: Post-rollback health check
        if: inputs.skip_health_checks != true
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_PROD_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_PROD_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_PROD_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PROD_PASSWORD }}
        run: |
          echo "🔍 Performing post-rollback health check..."

          chmod +x ./scripts/db-health-check.sh
          ./scripts/db-health-check.sh --production

          echo "✅ Post-rollback health check passed"

      - name: Verify rollback state
        run: |
          echo "🔍 Verifying rollback state..."

          # Verify the database state after rollback
          yarn workspace @misc-poc/infrastructure-localstorage exec node -e "
            const { MigrationManager } = require('./dist/migration-manager');
            const { StorageManager } = require('./dist/storage-manager');

            async function verifyRollback() {
              try {
                const storageManager = new StorageManager();
                const migrationManager = new MigrationManager(storageManager);

                const currentVersion = await migrationManager.getCurrentVersion();
                const history = migrationManager.getMigrationHistory();

                console.log('Current schema version after rollback:', currentVersion);
                console.log('Recent migration history:', JSON.stringify(history.slice(0, 3), null, 2));

                console.log('✅ Rollback state verification completed');
              } catch (error) {
                console.error('Rollback verification failed:', error.message);
                if ('${{ inputs.force_rollback }}' !== 'true') {
                  process.exit(1);
                } else {
                  console.warn('⚠️ Verification failed, but force rollback enabled');
                }
              }
            }

            verifyRollback();
          "

  post_rollback_actions:
    name: Post-Rollback Actions
    runs-on: ubuntu-latest
    needs: [emergency_validation, pre_rollback_backup, execute_emergency_rollback]
    if: needs.execute_emergency_rollback.outputs.rollback_success == 'true'
    environment: production

    steps:
      - name: Generate emergency rollback report
        run: |
          echo "# Emergency Rollback Report" > emergency-rollback-report.md
          echo "" >> emergency-rollback-report.md
          echo "## Incident Details" >> emergency-rollback-report.md
          echo "- **Rollback ID**: emergency-rollback-$(date +%Y%m%d-%H%M%S)" >> emergency-rollback-report.md
          echo "- **Initiated by**: ${{ github.actor }}" >> emergency-rollback-report.md
          echo "- **Timestamp**: $(date)" >> emergency-rollback-report.md
          echo "- **Reason**: ${{ inputs.reason }}" >> emergency-rollback-report.md
          echo "- **Target Backup**: ${{ inputs.backup_name }}" >> emergency-rollback-report.md
          echo "- **Duration**: ${{ needs.execute_emergency_rollback.outputs.rollback_duration }}" >> emergency-rollback-report.md
          echo "" >> emergency-rollback-report.md
          echo "## Backups Created" >> emergency-rollback-report.md
          echo "- **Pre-rollback backup**: ${{ needs.pre_rollback_backup.outputs.current_backup_name }}" >> emergency-rollback-report.md
          echo "- **Restored from**: ${{ inputs.backup_name }}" >> emergency-rollback-report.md
          echo "" >> emergency-rollback-report.md
          echo "## Status" >> emergency-rollback-report.md
          echo "✅ Emergency rollback completed successfully" >> emergency-rollback-report.md
          echo "✅ Pre-rollback backup created" >> emergency-rollback-report.md
          echo "✅ System health verified" >> emergency-rollback-report.md
          echo "" >> emergency-rollback-report.md
          echo "## Post-Rollback Actions Required" >> emergency-rollback-report.md
          echo "- [ ] Notify stakeholders of rollback completion" >> emergency-rollback-report.md
          echo "- [ ] Investigate root cause of migration failure" >> emergency-rollback-report.md
          echo "- [ ] Plan remediation steps" >> emergency-rollback-report.md
          echo "- [ ] Schedule maintenance window for re-migration" >> emergency-rollback-report.md
          echo "- [ ] Update deployment procedures based on lessons learned" >> emergency-rollback-report.md

      - name: Upload emergency rollback report
        uses: actions/upload-artifact@v4
        with:
          name: emergency-rollback-report
          path: emergency-rollback-report.md

      - name: Create incident tracking issue
        run: |
          echo "📝 Emergency rollback incident tracking issue would be created here"
          echo "Title: Emergency Rollback - ${{ inputs.reason }}"
          echo "Labels: emergency, rollback, incident"

  notification:
    name: Emergency Rollback Notification
    runs-on: ubuntu-latest
    needs: [emergency_validation, pre_rollback_backup, execute_emergency_rollback, post_rollback_actions]
    if: always()

    steps:
      - name: Emergency rollback summary
        run: |
          echo "# 🚨 Emergency Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Incident Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Reason**: ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Target Backup**: ${{ inputs.backup_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation**: ${{ needs.emergency_validation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-Rollback Backup**: ${{ needs.pre_rollback_backup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Rollback Execution**: ${{ needs.execute_emergency_rollback.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-Rollback Actions**: ${{ needs.post_rollback_actions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.execute_emergency_rollback.result }}" == "success" ]; then
            echo "✅ **Emergency rollback completed successfully**" >> $GITHUB_STEP_SUMMARY
            echo "📋 Check artifacts for detailed reports" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Emergency rollback failed**" >> $GITHUB_STEP_SUMMARY
            echo "🚨 **CRITICAL: Manual intervention required**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Critical failure alert
        if: needs.execute_emergency_rollback.result == 'failure'
        run: |
          echo "🚨 CRITICAL ALERT: Emergency rollback failed"
          echo "Immediate manual intervention required"
          echo "Contact: Database Administrator, DevOps Team, CTO"
          exit 1